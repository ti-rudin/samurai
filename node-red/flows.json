[
    {
        "id": "c18759d07acde4e0",
        "type": "tab",
        "label": "Поток 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d1b2c3d4e5f67890",
        "type": "tab",
        "label": "HTTP Request Test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "12345678.90abcd",
        "type": "telegram bot",
        "botname": "Автосервис Бот",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "",
        "socksusername": "",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbothost": "",
        "localbotport": "",
        "publicbotport": "",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "46d9409b7f17579f",
        "type": "http in",
        "z": "c18759d07acde4e0",
        "name": "",
        "url": "/ai-opis",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "7b2b03b1586d15b6",
                "8c9726728262bd4d"
            ]
        ]
    },
    {
        "id": "32ff0fab3eb4644a",
        "type": "http response",
        "z": "c18759d07acde4e0",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 120,
        "y": 160,
        "wires": []
    },
    {
        "id": "7b2b03b1586d15b6",
        "type": "function",
        "z": "c18759d07acde4e0",
        "name": "Подготовка запроса к Yandex GPT",
        "func": "// Конфигурационные параметры\nconst FOLDER_ID = env.get('YANDEX_GPT_FOLDER_ID');\nconst IAM_TOKEN = flow.get('iamToken');\n// Формируем тело запроса для Yandex GPT API\n\nmsg = {\n\n  payload: {\n    \"modelUri\": `gpt://${FOLDER_ID}/yandexgpt/latest`,\n    \"jsonObject\": true,\n    \"completionOptions\": {\n      \"maxTokens\": 2000,\n      \"temperature\": 0.3\n    },\n    \"messages\": [\n      {\n        \"role\": \"system\",\n        \"text\": \"Ты — AI-ассистент автосервиса «Автоклуб Самурай». Твоя роль — формировать детализированные JSON-ответы по заявкам на ремонт автомобилей. \\n\\nИнструкции:\\n\\n1. **Структура ответа**: Всегда возвращай ответ в формате JSON, содержащий следующие разделы:\\n   - works: основные работы\\n   - parts: необходимые запчасти\\n   - recommendedWorks: рекомендуемые работы\\n   - recommendedParts: рекомендуемые запчасти\\n   - notes: технические примечания\\n\\n2. **Формат данных**:\\n   - Для работ: название, описание, стоимость, статус (всегда «pending»), флаг рекомендации\\n   - Для запчастей: номер, название, количество, цена (всегда 0), статус (всегда «pending_from_client»), флаг рекомендации\\n   - В описании работ детализируй ключевые этапы\\n   - Указывай 0000 поле number \\n\\n3. **Расчет стоимости**:\\n   найди информацию о нормо-часах (с точностью до 15 мин) по видам работ и умножь на почасовую ставку- Ставка: \"+ msg.payload.hourlyRate +\" руб./час)\\n если информации о норме-часах нет, ищи среднерыночную стоимость работы\\n  - Для запчастей указывай 0000\\n\\n4. **Технические детали**:\\n    - Добавляй особенности для марки/модели авто\\n   - В notes включай важные для клиента технические примечания\\n\\n5. **Рекомендации**:\\n   - В recommendedWorks включай сопутствующие и превентивные работы\\n   - В recommendedParts — расходники и смежные запчасти\\n   - Все рекомендации помечай isRecomended: true\\n\\n6. **Стиль**:\\n   - Профессиональный технический язык, заменяй слэнговые названия на нормальные \\n   - Четкие формулировки без лишних слов\\n   - Без гарантий, скидок, маркетинговых фраз\\n\\nПример вывода:\\n{\\n  \\\"works\\\": [{\\\"name\\\": \\\"...\\\", \\\"description\\\": \\\"...\\\", \\\"cost\\\": 1000, \\\"status_of_work\\\": \\\"pending\\\", \\\"isRecomended\\\": false}],\\n  \\\"parts\\\": [{\\\"number\\\": \\\"...\\\", \\\"name\\\": \\\"...\\\", \\\"quantity\\\": 1, \\\"price\\\": 2000, \\\"partstatus\\\": \\\"need_to_order\\\", \\\"isRecomended\\\": false}],\\n  \\\"recommendedWorks\\\": [...],\\n  \\\"recommendedParts\\\": [...],\\n  \\\"notes\\\": \\\"...\\\"\\n}\\n\\n\"\n      },\n      {\n        \"role\": \"user\",\n        \"text\": \"Автомобиль - \" + msg.payload.car.make + \" \"+ msg.payload.car.model + \" \" + msg.payload.description\n      }\n    ]\n  },\n\n\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${IAM_TOKEN}`,\n    \"x-folder-id\": FOLDER_ID\n  },\n  res: msg.res,\n  req: msg.req\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            [
                "79f6c84d9e59ac2c"
            ]
        ]
    },
    {
        "id": "79f6c84d9e59ac2c",
        "type": "http request",
        "z": "c18759d07acde4e0",
        "name": "Запрос к Yandex GPT API",
        "method": "POST",
        "ret": "json",
        "paytoqs": "ignore",
        "url": "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "4b49d67519515950",
                "3449c506d1b4d12c"
            ]
        ]
    },
    {
        "id": "9d6b1ed1fb3f7992",
        "type": "function",
        "z": "c18759d07acde4e0",
        "name": "обработка ответа",
        "func": "//  const response = JSON.parse(msg.payload);\n//msg.payload = response.result?.alternatives?.[0]?.message?.text?.replace(/```/g, '').trim();\n\n\n//onst response = JSON.parse(msg.payload);\nconst response2 = msg.payload.result?.alternatives?.[0]?.message?.text;\nmsg.payload = JSON.parse(response2)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 100,
        "wires": [
            [
                "32ff0fab3eb4644a"
            ]
        ]
    },
    {
        "id": "4b49d67519515950",
        "type": "json",
        "z": "c18759d07acde4e0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 890,
        "y": 100,
        "wires": [
            [
                "9d6b1ed1fb3f7992"
            ]
        ]
    },
    {
        "id": "3449c506d1b4d12c",
        "type": "debug",
        "z": "c18759d07acde4e0",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 40,
        "wires": []
    },
    {
        "id": "6cad9ff9aef963d8",
        "type": "inject",
        "z": "c18759d07acde4e0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "39600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "98449c58da5eb596"
            ]
        ]
    },
    {
        "id": "98449c58da5eb596",
        "type": "function",
        "z": "c18759d07acde4e0",
        "name": "Получение IAM токена",
        "func": "// Получаем токен из переменной окружения\nconst oauthToken = env.get('YANDEX_PASSPORT_OAUTH_TOKEN');\n\n// Формируем тело запроса\nmsg.payload = {\n    \"yandexPassportOauthToken\": oauthToken\n};\n\n// Устанавливаем заголовки\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 600,
        "wires": [
            [
                "iam_request_node",
                "f1ae459a71b748b5"
            ]
        ]
    },
    {
        "id": "iam_request_node",
        "type": "http request",
        "z": "c18759d07acde4e0",
        "name": "IAM токен запрос",
        "method": "POST",
        "ret": "json",
        "paytoqs": "ignore",
        "url": "https://iam.api.cloud.yandex.net/iam/v1/tokens",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 600,
        "wires": [
            [
                "3d073725e82f0812"
            ]
        ]
    },
    {
        "id": "3d073725e82f0812",
        "type": "json",
        "z": "c18759d07acde4e0",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 750,
        "y": 600,
        "wires": [
            [
                "7ee2ccbbaa3ae53e"
            ]
        ]
    },
    {
        "id": "7ee2ccbbaa3ae53e",
        "type": "function",
        "z": "c18759d07acde4e0",
        "name": "flow.set(\"iamToken\", msg.payload.iamToken)",
        "func": "flow.set(\"iamToken\", msg.payload.iamToken)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "e342a44592b692f7",
        "type": "comment",
        "z": "c18759d07acde4e0",
        "name": "обновление токена раз в 11 часов",
        "info": "",
        "x": 160,
        "y": 560,
        "wires": []
    },
    {
        "id": "39ea9e128cf1b10d",
        "type": "http in",
        "z": "c18759d07acde4e0",
        "name": "",
        "url": "/ai-pts-recognize",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "cda2656eb249c551"
            ]
        ]
    },
    {
        "id": "aa909b43669c450b",
        "type": "http response",
        "z": "c18759d07acde4e0",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 120,
        "y": 340,
        "wires": []
    },
    {
        "id": "cda2656eb249c551",
        "type": "function",
        "z": "c18759d07acde4e0",
        "name": "Подготовка запроса к Yandex GPT",
        "func": "// Конфигурационные параметры\nconst FOLDER_ID = env.get('YANDEX_VISION_FOLDER_ID');\nconst IAM_TOKEN = flow.get('iamToken');\n\n// Предполагаем, что изображение уже закодировано в base64 и хранится в msg.payload.image\nconst imageData = msg.payload.img;\n\n// Формируем тело запроса для Yandex Vision API\nmsg.payload = {\n    \"folderId\": FOLDER_ID,\n    \"analyze_specs\": [{\n        \"content\": imageData,\n        \"features\": [{\n            \"type\": \"TEXT_DETECTION\",\n            \"text_detection_config\": {\n                \"language_codes\": [\"*\"], // Распознавание всех языков\n                \"model\": \"vehicle-registration-back\" // Указание модели для распознавания задней стороны водительских прав\n            }\n        }]\n    }]\n};\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${IAM_TOKEN}`\n};\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            [
                "73bf07304c2a57ab"
            ]
        ]
    },
    {
        "id": "73bf07304c2a57ab",
        "type": "http request",
        "z": "c18759d07acde4e0",
        "name": "Запрос к Yandex GPT API",
        "method": "POST",
        "ret": "json",
        "paytoqs": "ignore",
        "url": "https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 280,
        "wires": [
            [
                "27638bfbf8d5a6d4",
                "7201b9b195cf6f0b"
            ]
        ]
    },
    {
        "id": "7201b9b195cf6f0b",
        "type": "function",
        "z": "c18759d07acde4e0",
        "name": "обработка ответа",
        "func": "//  const response = JSON.parse(msg.payload);\n//msg.payload = response.result?.alternatives?.[0]?.message?.text?.replace(/```/g, '').trim();\n\n\nconst response = JSON.parse(msg.payload);\nconst response2 = response.results[0]?.results[0]?.textDetection?.pages[0]?.entities\nmsg.payload = response2;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 280,
        "wires": [
            [
                "aa909b43669c450b",
                "9dcaebeb533dfbab"
            ]
        ]
    },
    {
        "id": "27638bfbf8d5a6d4",
        "type": "debug",
        "z": "c18759d07acde4e0",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 220,
        "wires": []
    },
    {
        "id": "9dcaebeb533dfbab",
        "type": "debug",
        "z": "c18759d07acde4e0",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 280,
        "wires": []
    },
    {
        "id": "8c9726728262bd4d",
        "type": "debug",
        "z": "c18759d07acde4e0",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 60,
        "wires": []
    },
    {
        "id": "f1ae459a71b748b5",
        "type": "debug",
        "z": "c18759d07acde4e0",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 640,
        "wires": []
    },
    {
        "id": "a1b2c3d4e5f6",
        "type": "inject",
        "z": "d1b2c3d4e5f67890",
        "name": "Trigger Request",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "b1b2c3d4e5f6"
            ]
        ]
    },
    {
        "id": "b1b2c3d4e5f6",
        "type": "http request",
        "z": "d1b2c3d4e5f67890",
        "name": "Fetch Post #1",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://jsonplaceholder.typicode.com/posts/1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "c1b2c3d4e5f6"
            ]
        ]
    },
    {
        "id": "c1b2c3d4e5f6",
        "type": "debug",
        "z": "d1b2c3d4e5f67890",
        "name": "Show Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 120,
        "wires": []
    }
]